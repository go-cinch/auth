// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		Action:                newAction(db, opts...),
		Role:                  newRole(db, opts...),
		User:                  newUser(db, opts...),
		UserGroup:             newUserGroup(db, opts...),
		UserUserGroupRelation: newUserUserGroupRelation(db, opts...),
		Whitelist:             newWhitelist(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Action                action
	Role                  role
	User                  user
	UserGroup             userGroup
	UserUserGroupRelation userUserGroupRelation
	Whitelist             whitelist
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Action:                q.Action.clone(db),
		Role:                  q.Role.clone(db),
		User:                  q.User.clone(db),
		UserGroup:             q.UserGroup.clone(db),
		UserUserGroupRelation: q.UserUserGroupRelation.clone(db),
		Whitelist:             q.Whitelist.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Action:                q.Action.replaceDB(db),
		Role:                  q.Role.replaceDB(db),
		User:                  q.User.replaceDB(db),
		UserGroup:             q.UserGroup.replaceDB(db),
		UserUserGroupRelation: q.UserUserGroupRelation.replaceDB(db),
		Whitelist:             q.Whitelist.replaceDB(db),
	}
}

type queryCtx struct {
	Action                *actionDo
	Role                  *roleDo
	User                  *userDo
	UserGroup             *userGroupDo
	UserUserGroupRelation *userUserGroupRelationDo
	Whitelist             *whitelistDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Action:                q.Action.WithContext(ctx),
		Role:                  q.Role.WithContext(ctx),
		User:                  q.User.WithContext(ctx),
		UserGroup:             q.UserGroup.WithContext(ctx),
		UserUserGroupRelation: q.UserUserGroupRelation.WithContext(ctx),
		Whitelist:             q.Whitelist.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
